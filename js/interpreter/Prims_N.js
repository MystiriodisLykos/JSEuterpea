// Generated by CoffeeScript 1.12.4
(function() {
  var divF, dynDownF, dynFF, dynFfF, dynMfF, dynMpF, dynPF, dynUpF, eighthF, halfF, marimbaF, minusF, modifyDur, modifyDyn, modifyInst, modifyPitch, mulF, newDyn, par, pianoF, pitchDownF, pitchUpF, plusF, quarterF, seq, sixteenthF, violinF;

  seq = function(fm, sm) {
    var fmv, smv;
    fmv = fm.asMusic();
    smv = sm.asMusic();
    return new createMusValue(Music.Seq(fmv, smv));
  };

  par = function(fm, sm) {
    var fmv, smv;
    fmv = fm.asMusic();
    smv = sm.asMusic();
    return new createMusValue(Music.Par(fmv, smv));
  };

  modifyInst = function(m, inst) {
    var mv;
    mv = m.asMusic();
    return new createMusValue(mv.modInst(inst));
  };

  pianoF = function(m) {
    return modifyInst(m, 'acoustic_grand_piano');
  };

  marimbaF = function(m) {
    return modifyInst(m, 'marimba');
  };

  violinF = function(m) {
    return modifyInst(m, 'violin');
  };

  modifyDur = function(m, dur) {
    var mv;
    mv = m.asMusic();
    return new createMusValue(mv.modDur(dur));
  };

  halfF = function(m) {
    return modifyDur(m, .5);
  };

  quarterF = function(m) {
    return modifyDur(m, .25);
  };

  eighthF = function(m) {
    return modifyDur(m, .125);
  };

  sixteenthF = function(m) {
    return modifyDur(m, .0625);
  };

  modifyPitch = function(m, p) {
    var mv;
    mv = m.asMusic();
    return new createMusValue(mv.modPitch(p));
  };

  pitchUpF = function(m) {
    return modifyPitch(m, 2);
  };

  pitchDownF = function(m) {
    return modifyPitch(m, .5);
  };

  newDyn = function(m, d) {
    var mv;
    mv = m.asMusic();
    return new createMusValue(mv.newVel(d));
  };

  dynPF = function(m) {
    return newDyn(m, 25);
  };

  dynMpF = function(m) {
    return reutrn(newDyn(m, 50));
  };

  dynMfF = function(m) {
    return newDyn(m, 75);
  };

  dynFF = function(m) {
    return newDyn(m, 100);
  };

  dynFfF = function(m) {
    return newDyn(m, 125);
  };

  modifyDyn = function(m, d) {
    var mv;
    mv = m.asMusiic();
    return new createMusValue(mv.modVel(d));
  };

  dynUpF = function(m) {
    return modifyDyn(m, 2);
  };

  dynDownF = function(m) {
    return modifyDyn(m, .5);
  };

  plusF = function(x, y) {
    var xv, yv;
    xv = x.asNum();
    yv = y.asNum();
    return new createNumValue(xv + yv);
  };

  minusF = function(x, y) {
    var xv, yv;
    xv = x.asNum();
    yv = y.asNum();
    return new createNumValue(xv - yv);
  };

  mulF = function(x, y) {
    var xv, yv;
    xv = x.asNum();
    yv = y.asNum();
    return new createNumValue(xv * yv);
  };

  divF = function(x, y) {
    var xv, yv;
    xv = x.asNum();
    yv = y.asNum();
    return new createNumValue(xv / yv);
  };

  this.prims = {
    '+': plusF,
    '-': minusF,
    '*': mulF,
    '/': divF
  };

}).call(this);

//# sourceMappingURL=Prims_N.js.map
