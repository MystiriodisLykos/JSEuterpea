// Generated by CoffeeScript 1.12.4
(function() {
  this.ConstVal = (function() {
    function ConstVal(val) {
      this.val = val;
    }

    ConstVal.prototype.apply = function(t) {
      if (t) {
        thow('Cannot apply Constants');
      }
      return this.val;
    };

    return ConstVal;

  })();

  this.FunPVal = (function() {
    function FunPVal(n, fn) {
      if (typeof n === 'number') {
        this.n = n;
        this.fn = fn;
        this.args = [];
      } else {
        this.n = n.n;
        this.fn = n.fn;
        this.args = fn;
      }
    }

    FunPVal.prototype.apply = function(t) {
      var tempArgs;
      tempArgs = this.args.concat([t]);
      if (tempArgs.length === this.n) {
        return this.fn.apply(null, tempArgs);
      }
      return new FunPVal(this, tempArgs);
    };

    return FunPVal;

  })();

  this.FunLVal = (function() {
    function FunLVal(arg1, fn1, env1) {
      this.arg = arg1;
      this.fn = fn1;
      this.env = env1;
    }

    FunLVal.prototype.apply = function(t) {
      var envL;
      envL = new Env(this.arg.body, t, this.env);
      return this.fn["eval"](envL);
    };

    return FunLVal;

  })();

  this.MusVal = (function() {
    function MusVal(val) {
      this.val = val;
    }

    MusVal.prototype.apply = function(t) {
      if (t) {
        throw 'Cannot apply Musical values';
      }
      return this.val;
    };

    return MusVal;

  })();

  this.createNumValue = function(v) {
    return new ConstVal(v);
  };

  this.createFunPValue = function(n, fn) {
    return new FunPVal(n, fn);
  };

  this.createFunLValue = function(arg, fn, env) {
    return new FunLVal(arg, fn, env);
  };

  this.createMusValue = function(v) {
    return new MusVal(v);
  };

}).call(this);

//# sourceMappingURL=Value.js.map
