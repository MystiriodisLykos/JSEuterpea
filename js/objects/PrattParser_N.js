// Generated by CoffeeScript 1.12.4

/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    * File: PrattParser.coffee
    * -----------------
    * File containing the functions to parse a token string into ASTs
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */

(function() {
  var PrattParser;

  PrattParser = function(tokenStream) {

    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        * PrattParser([Tokens] tokenStream)
        * ----------------
        *
        ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    var curToken, i, j, len, minPres, minPresIdx, minPresdx, ref, results;
    if ((nonWhiteSpace(tokenStream)) === 1) {
      curToken = findNonWhite(tokenStream);
      if (!(curToken instanceof Token)) {
        return curToken;
      }
      switch (curToken.type) {
        case 'Integer':
          return createAstConst(curToken);
        case 'Name' || 'Symbol':
          return createAstVar(curToken);
      }
    }
    minPres = 9;
    minPresIdx = 0;
    results = [];
    for (i = j = 0, len = tokenStream.length; j < len; i = ++j) {
      curToken = tokenStream[i];
      if ((ref = curToken.type) !== 'White Space' && ref !== 'Newline') {
        if (curToken.pres < minPres) {
          minPres = curToken.pres;
          results.push(minPresdx = i);
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

}).call(this);

//# sourceMappingURL=PrattParser_N.js.map
